using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace IOKode.OpinionatedFramework.SourceGenerators.Migrations;

public partial class MigrationsGenerator
{
    private class ConfigOptions
    {
        public required string RootNamespace { get; set; }
        public required string RootPath { get; set; }
    }

    private class SqlFile
    {
        public required string FilePath { get; set; }
        public required string Content { get; set; }
        public string FileName => Path.GetFileNameWithoutExtension(FilePath);
    }

    private class MigrationClass
    {
        public SqlFile SqlFile { get; }
        public ConfigOptions ConfigOptions { get; }
        public string[] Tags { get; set; }
        public string Name => GetName();
        public string ClassName => Name.EndsWith("Migration") ? Name : $"{Name}Migration";
        public string GeneratedFileName => $"{ClassName}.g.cs";

        public string Namespace => GetNamespace();
        public int Version => GetVersionNumber();
        public string UpFileRelativePath => GetFileRelativePath(SqlFile);
        public string UpSqlContent => GetUpContent();
        public string DownSqlContent => GetDownContent();

        private readonly string classNameRegex = @"(?:\d+_)?([A-Za-z]\w*)";
        private readonly string versionRegex = @"--\s*@version\s+(\d+)";
        private readonly string versionFromFileNameRegex = @"(\d+)_[A-Za-z]\w*";
        private readonly string queryNamespaceParameterRegex = @"--\s*@namespace\s+([\w.]+)";
        private readonly string upRegex = $@"--\s*@up\s*([\s\S]+?)(?=--\s*@down|$)";
        private readonly string downRegex = @"--\s*@down\s*([\s\S]+?)(?=--\s*@up|$)";
        private readonly string tagRegex = @"--\s*@tag\s+([\w \t]+)";

        public MigrationClass(SqlFile sqlFile, ConfigOptions configOptions)
        {
            SqlFile = sqlFile;
            ConfigOptions = configOptions;
            var tagMatches = Regex.Matches(SqlFile.Content, tagRegex);
            Tags = tagMatches.Cast<Match>().Select(match => match.Groups[1].Value.Trim()).ToArray();
        }

        private string GetFileRelativePath(SqlFile file)
        {
            var rootPathName = ConfigOptions.RootPath.TrimEnd(Path.DirectorySeparatorChar);
            int startRootPathIndex = file.FilePath.IndexOf(rootPathName, StringComparison.InvariantCultureIgnoreCase);
            string relativePath = file.FilePath.Substring(startRootPathIndex + rootPathName.Length);
            return $".{relativePath}";
        }

        private string GetNamespace()
        {
            var queryNamespaceMatches = Regex.Matches(SqlFile.Content, queryNamespaceParameterRegex);
            var namespaceInFile = queryNamespaceMatches.Cast<Match>().FirstOrDefault()?.Groups[1].Value;
            if (namespaceInFile != null)
            {
                return namespaceInFile;
            }

            string rootPathName = ConfigOptions.RootPath.TrimEnd(Path.DirectorySeparatorChar);
            var fileDirectoryPath = Path.GetDirectoryName(SqlFile.FilePath) ?? string.Empty;
            int startRootPathIndex = fileDirectoryPath.IndexOf(rootPathName, StringComparison.InvariantCultureIgnoreCase);
            string relativePath = fileDirectoryPath.Substring(startRootPathIndex + rootPathName.Length);
            string relativeNamespace = relativePath.Replace(Path.DirectorySeparatorChar, '.').Trim('.');

            return string.IsNullOrWhiteSpace(relativeNamespace)
                ? ConfigOptions.RootNamespace
                : $"{ConfigOptions.RootNamespace}.{relativeNamespace}";
        }
        
        private string GetName()
        {
            var match = Regex.Match(SqlFile.FileName, classNameRegex);
            return match.Success ? match.Groups[1].Value : SqlFile.FileName;
        }

        private int GetVersionNumber()
        {
            var match = Regex.Match(SqlFile.Content, versionRegex);
            if (match.Success)
            {
                return int.Parse(match.Groups[1].Value);
            }

            match = Regex.Match(SqlFile.FileName, versionFromFileNameRegex);
            return int.Parse(match.Groups[1].Value);
        }
        
        private string GetUpContent()
        {
            var match = Regex.Match(SqlFile.Content, upRegex);
            return match.Success ? match.Groups[1].Value.Trim() : SqlFile.Content;
        }

        private string GetDownContent()
        {
            var match = Regex.Match(SqlFile.Content, downRegex);
            return match.Success ? match.Groups[1].Value.Trim() : SqlFile.Content;
        }
    }

    private const string queryObjectClassTemplate =
        """"
        // This file was auto-generated by a source generator

        #nullable enable
        using FluentMigrator;

        namespace {{ Namespace }};
        
        [Migration({{ Version }})]
        {{ if Tags && Tags.length > 0 }}[Tags(TagBehavior.RequireAny, {{ for tag in Tags }}"{{ tag }}"{{ if !for.last }}, {{ end }}{{ end }})]{{ end }}
        public partial class {{ ClassName }} : Migration
        {
            public const string UpSqlContent =
                """
                {{ UpSqlContent }}
                """;
            public const string DownSqlContent =
                """
                {{ DownSqlContent }}
                """;

            public override void Up() => Execute.Sql(UpSqlContent);
            public override void Down() => Execute.Sql(DownSqlContent);
        }
        """";
}